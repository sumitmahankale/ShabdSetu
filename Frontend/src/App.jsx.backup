import React, { useState, useRef, useEffect } from 'react';
import { Mic, MicOff, Volume2, Languages, Sun, Moon } from 'lucide-react';

function App() {
  const [isListening, setIsListening] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [translatedText, setTranslatedText] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [waterScale, setWaterScale] = useState(1);
  const [ripples, setRipples] = useState([]);
  const recognitionRef = useRef(null);
  const recognitionResolveRef = useRef(null);
  const [detectedSource, setDetectedSource] = useState('');
  const [translationMethod, setTranslationMethod] = useState('');
  const attemptingLangsRef = useRef([]);
  const [theme, setTheme] = useState(() => {
    if (typeof window !== 'undefined') {
      return localStorage.getItem('theme') || 'dark';
    }
    return 'dark';
  });

  // Apply theme class to html root
  useEffect(() => {
    const root = document.documentElement;
    if (theme === 'dark') {
      root.classList.add('dark');
    } else {
      root.classList.remove('dark');
    }
    localStorage.setItem('theme', theme);
  }, [theme]);

  const toggleTheme = () => setTheme(t => t === 'dark' ? 'light' : 'dark');
  
  // Initialize speech recognition
  useEffect(() => {
    if (!('webkitSpeechRecognition' in window || 'SpeechRecognition' in window)) return;
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    const rec = new SpeechRecognition();
    rec.continuous = false;
    rec.interimResults = false;

    rec.onstart = () => {
      setIsListening(true);
      setWaterScale(0.8);
      createRipple();
    };
    rec.onend = () => {
      setIsListening(false);
      setWaterScale(1);
      // If ended without a result and we are in multi-attempt mode, trigger next
      if (recognitionResolveRef.current) {
        recognitionResolveRef.current(''); // resolve empty to continue flow
        recognitionResolveRef.current = null;
      }
    };
    rec.onerror = (e) => {
      console.warn('Speech recognition error', e);
      if (recognitionResolveRef.current) {
        recognitionResolveRef.current('');
        recognitionResolveRef.current = null;
      }
    };
    rec.onresult = (event) => {
      const transcript = event.results[0][0].transcript;
      if (recognitionResolveRef.current) {
        recognitionResolveRef.current(transcript);
        recognitionResolveRef.current = null;
      }
    };
    recognitionRef.current = rec;
  }, []);

  // Create ripple effect
  const createRipple = () => {
    const id = Date.now();
    setRipples(prev => [...prev, id]);
    setTimeout(() => {
      setRipples(prev => prev.filter(rippleId => rippleId !== id));
    }, 2000);
  };

  // Translation function
  const translateText = async (text) => {
    setIsLoading(true);
    try {
      const response = await fetch(`http://localhost:8003/translate`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          text, 
          source_language: 'auto',
          target_language: 'auto' 
        })
      });
  const data = await response.json();
  setTranslatedText(data.translated_text);
  setDetectedSource(data.source_language || '');
  setTranslationMethod(data.translation_method || '');
      
      // Only speak if translation was successful and not a fallback message
      if (data.translated_text && !data.translated_text.includes('Translation not available')) {
        speakText(data.translated_text, data.target_language);
      }
    } catch (error) {
      console.error('Translation error:', error);
      setTranslatedText('Translation failed. Please try again.');
    }
    setIsLoading(false);
  };

  // Text to speech
  const speakText = (text, targetLang = 'mr') => {
    if ('speechSynthesis' in window && text) {
      // Stop any current speech
      speechSynthesis.cancel();
      
      setIsSpeaking(true);
      const utterance = new SpeechSynthesisUtterance(text);
      
      // Set language based on target language
      if (targetLang === 'mr') {
        // Attempt Marathi locale; if unsupported browser may fallback automatically
        utterance.lang = 'mr-IN';
        utterance.rate = 0.85; // Slightly slower for clarity
      } else {
        utterance.lang = 'en-US';
        utterance.rate = 0.9;
      }
      
      utterance.volume = 0.8;
      utterance.pitch = 1.0;
      
      utterance.onend = () => {
        setIsSpeaking(false);
        console.log('Speech synthesis completed');
      };
      
      utterance.onerror = (event) => {
        console.error('Speech synthesis error:', event);
        setIsSpeaking(false);
        
        // Fallback: try with different language
  // No Hindi fallback â€“ only English if Marathi completely fails can be added explicitly by user
      };
      
      console.log(`Speaking: "${text}" in language: ${utterance.lang}`);
      speechSynthesis.speak(utterance);
    } else {
      console.warn('Speech synthesis not supported');
      setIsSpeaking(false);
    }
  };

  // Helper: single recognition attempt for one language returning transcript
  const recognizeOnce = (lang) => new Promise((resolve) => {
    if (!recognitionRef.current) return resolve('');
    recognitionResolveRef.current = resolve;
    try {
      recognitionRef.current.lang = lang;
      recognitionRef.current.start();
    } catch (e) {
      console.warn('Failed to start recognition for', lang, e);
      resolve('');
    }
  });

  const languageAttempts = ['mr-IN','en-US'];

  const startListening = async () => {
    if (!recognitionRef.current || isListening) return;
    attemptingLangsRef.current = [...languageAttempts];
    setTranslatedText('');
    setDetectedSource('');
    setTranslationMethod('');
    for (const lang of languageAttempts) {
      const transcript = await recognizeOnce(lang);
      if (!transcript) continue; // try next
      await translateText(transcript);
      // Break if not fallback (avoid stale state by checking last translationMethod via ref after small delay)
      if (translationMethod !== 'fallback') break;
    }
  };

  const gradientClass = theme === 'dark'
    ? 'bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900'
    : 'bg-gradient-to-br from-amber-50 via-orange-100 to-pink-100';

  const bubbleColors = theme === 'dark'
    ? ['bg-blue-400', 'bg-cyan-400', 'bg-teal-400', 'bg-purple-400']
    : ['bg-yellow-300', 'bg-orange-300', 'bg-pink-300', 'bg-rose-300'];

  const orbGradient = theme === 'dark'
    ? 'from-cyan-300 via-blue-400 to-blue-600'
    : 'from-amber-300 via-orange-400 to-pink-500';

  const shadowColor = theme === 'dark' ? 'shadow-blue-500/50' : 'shadow-orange-400/50';
  const hoverShadow = theme === 'dark' ? 'hover:shadow-blue-400/70' : 'hover:shadow-orange-500/70';

  return (
    <div className={`min-h-screen ${gradientClass} flex items-center justify-center relative overflow-hidden transition-all duration-700 ease-in-out`}>
      {/* Animated background particles */}
      <div className="absolute inset-0 overflow-hidden">
        {[...Array(12)].map((_, i) => (
          <div
            key={i}
            className={`absolute rounded-full opacity-30 animate-float-${i % 3}`}
            style={{
              width: `${Math.random() * 60 + 20}px`,
              height: `${Math.random() * 60 + 20}px`,
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
              backgroundColor: theme === 'dark' 
                ? `hsl(${200 + Math.random() * 60}, 70%, 60%)`
                : `hsl(${30 + Math.random() * 60}, 80%, 70%)`,
              animationDelay: `${Math.random() * 5}s`,
              animationDuration: `${3 + Math.random() * 4}s`
            }}
          />
        ))}
      </div>

      {/* Background water effect */}
      <div className="absolute inset-0 opacity-25">
        {bubbleColors.map((color, i) => (
          <div
            key={i}
            className={`absolute w-96 h-96 ${color} rounded-full mix-blend-multiply filter blur-xl animate-pulse`}
            style={{
              left: `${25 + (i * 25)}%`,
              top: `${25 + (i % 2) * 50}%`,
              animationDelay: `${i * 2}s`,
              transform: `translate(-50%, -50%)`
            }}
          />
        ))}
      </div>

      {/* Magical theme toggle */}
      <button
        onClick={toggleTheme}
        className={`absolute top-6 right-6 z-20 group p-3 rounded-full transition-all duration-500 transform hover:scale-110 hover:rotate-12 ${
          theme === 'dark' 
            ? 'bg-gradient-to-r from-blue-600 to-purple-600 shadow-lg shadow-blue-500/30' 
            : 'bg-gradient-to-r from-yellow-400 to-orange-500 shadow-lg shadow-orange-400/40'
        }`}
        aria-label="Toggle theme"
      >
        <div className="relative overflow-hidden">
          {theme === 'dark' ? (
            <Sun className="w-6 h-6 text-yellow-200 group-hover:animate-spin transition-transform duration-300" />
          ) : (
            <Moon className="w-6 h-6 text-purple-100 group-hover:animate-bounce transition-transform duration-300" />
          )}
          <div className={`absolute inset-0 rounded-full opacity-0 group-hover:opacity-100 transition-opacity duration-300 ${
            theme === 'dark' ? 'bg-yellow-300/20' : 'bg-purple-300/20'
          }`} />
        </div>
      </button>

      {/* Main water orb */}
      <div className="relative z-10 flex flex-col items-center">
        {/* Water orb container */}
        <div 
          className={`relative transition-transform duration-300 ease-out ${
            isListening ? 'animate-pulse' : ''
          }`}
          style={{ transform: `scale(${waterScale})` }}
        >
          {/* Ripple effects */}
          {ripples.map((id) => (
            <div
              key={id}
              className="absolute inset-0 border-2 border-white/30 rounded-full animate-ping"
              style={{
                width: '300px',
                height: '300px',
                top: '50%',
                left: '50%',
                transform: 'translate(-50%, -50%)'
              }}
            />
          ))}
          
          {/* Main water orb */}
          <div
            className={`w-80 h-80 rounded-full bg-gradient-to-br ${orbGradient} 
              shadow-2xl ${shadowColor} relative overflow-hidden cursor-pointer
              transition-all duration-500 ${hoverShadow} hover:scale-105 group
              ${isLoading ? 'animate-spin' : ''}
              ${isSpeaking ? 'animate-bounce' : ''}`}
            onClick={startListening}
          >
            {/* Dynamic glow effect */}
            <div className={`absolute inset-0 rounded-full transition-opacity duration-300 ${
              theme === 'dark' 
                ? 'bg-gradient-to-t from-blue-600/20 via-cyan-400/10 to-white/30' 
                : 'bg-gradient-to-t from-orange-400/20 via-yellow-300/10 to-white/40'
            }`} />
            
            {/* Floating bubbles with theme colors */}
            <div className="absolute inset-0">
              {[...Array(8)].map((_, i) => (
                <div
                  key={i}
                  className={`absolute rounded-full transition-colors duration-500 ${
                    theme === 'dark' ? 'bg-white/20' : 'bg-white/40'
                  }`}
                  style={{
                    width: `${Math.random() * 20 + 10}px`,
                    height: `${Math.random() * 20 + 10}px`,
                    left: `${Math.random() * 80 + 10}%`,
                    top: `${Math.random() * 80 + 10}%`,
                    animation: `float ${Math.random() * 3 + 2}s ease-in-out infinite`,
                    animationDelay: `${Math.random() * 3}s`
                  }}
                />
              ))}
            </div>

            {/* Magical sparkles around orb */}
            {isListening && (
              <div className="absolute inset-0 pointer-events-none">
                {[...Array(6)].map((_, i) => (
                  <div
                    key={i}
                    className={`absolute w-2 h-2 rounded-full animate-ping ${
                      theme === 'dark' ? 'bg-cyan-300' : 'bg-yellow-400'
                    }`}
                    style={{
                      left: `${20 + Math.random() * 60}%`,
                      top: `${20 + Math.random() * 60}%`,
                      animationDelay: `${i * 0.1}s`
                    }}
                  />
                ))}
              </div>
            )}

            {/* Center icon with enhanced animations */}
            <div className="absolute inset-0 flex items-center justify-center group-hover:scale-110 transition-transform duration-300">
              {isListening ? (
                <MicOff className={`w-16 h-16 animate-pulse transition-colors duration-300 ${
                  theme === 'dark' ? 'text-cyan-100' : 'text-orange-100'
                }`} />
              ) : isSpeaking ? (
                <Volume2 className={`w-16 h-16 animate-bounce transition-colors duration-300 ${
                  theme === 'dark' ? 'text-blue-100' : 'text-pink-100'
                }`} />
              ) : isLoading ? (
                <Languages className={`w-16 h-16 animate-spin transition-colors duration-300 ${
                  theme === 'dark' ? 'text-purple-100' : 'text-amber-100'
                }`} />
              ) : (
                <Mic className={`w-16 h-16 transition-colors duration-300 ${
                  theme === 'dark' ? 'text-white' : 'text-white'
                }`} />
              )}
            </div>
          </div>
          </div>
        </div>

        {/* Status text with theme-aware styling */}
        <div className="mt-8 text-center">
          <h1 className={`text-4xl font-bold mb-4 bg-gradient-to-r bg-clip-text text-transparent transition-all duration-500 ${
            theme === 'dark' 
              ? 'from-cyan-300 to-blue-300' 
              : 'from-orange-500 to-pink-500'
          }`}>
            ShabdSetu
          </h1>
          <p className={`text-lg mb-2 transition-colors duration-300 ${
            theme === 'dark' ? 'text-white/80' : 'text-gray-700'
          }`}>
            {isListening ? 'Listening...' : isSpeaking ? 'Speaking...' : isLoading ? 'Translating...' : 'Tap the orb to speak'}
          </p>
          <p className={`text-sm h-5 transition-colors duration-300 ${
            theme === 'dark' ? 'text-white/60' : 'text-gray-500'
          }`}>
            {detectedSource && `Detected: ${detectedSource.toUpperCase()} (${translationMethod})`}
          </p>
          
          {/* Translated text display with enhanced theming */}
          {translatedText && (
            <div className={`backdrop-blur-lg rounded-2xl p-6 mt-6 max-w-md mx-auto border transition-all duration-500 transform animate-fadeIn ${
              theme === 'dark'
                ? 'bg-white/10 border-white/20 shadow-lg shadow-blue-500/10'
                : 'bg-white/80 border-orange-200/50 shadow-lg shadow-orange-300/20'
            }`}>
              <p className={`text-xl font-medium leading-relaxed transition-colors duration-300 ${
                theme === 'dark' ? 'text-white' : 'text-gray-800'
              }`}>
                {translatedText}
              </p>
            </div>
          )}
        </div>
      </div>

      {/* Enhanced custom animations */}
      <style jsx>{`
        @keyframes float {
          0%, 100% { transform: translateY(0px) rotate(0deg); opacity: 0.7; }
          50% { transform: translateY(-20px) rotate(180deg); opacity: 1; }
        }
        @keyframes float-0 {
          0%, 100% { transform: translateY(0px) translateX(0px); }
          33% { transform: translateY(-30px) translateX(10px); }
          66% { transform: translateY(-10px) translateX(-15px); }
        }
        @keyframes float-1 {
          0%, 100% { transform: translateY(0px) translateX(0px); }
          33% { transform: translateY(-20px) translateX(-10px); }
          66% { transform: translateY(-25px) translateX(8px); }
        }
        @keyframes float-2 {
          0%, 100% { transform: translateY(0px) translateX(0px); }
          33% { transform: translateY(-15px) translateX(12px); }
          66% { transform: translateY(-35px) translateX(-5px); }
        }
        @keyframes fadeIn {
          from { opacity: 0; transform: translateY(10px); }
          to { opacity: 1; transform: translateY(0px); }
        }
        .animate-fadeIn {
          animation: fadeIn 0.5s ease-out;
        }
      `}</style>
    </div>
  );
}

export default App;
